import debby, mummy, mummy/routers, taggy

type
  Blog = ref object
    id: int
    title: string
    author: string
    tags: string
    date: string
    body: string

let db = open("examples/microblog.db", "", "", "")

if not db.tableExists(Blog):

  db.createTable(Blog)

  let blog = Blog(
    title: "First blog!",
    author: "system",
    tags: "autogenerated, system",
    date: "today",
    body: "This is how to create a blog"
  )

  db.insert(blog)

  let blog2 = Blog(
    title: "Second blog!",
    author: "system",
    tags: "autogenerated, system",
    date: "yesterday",
    body: "This is how to create a second blog"
  )

  db.insert(blog2)

proc indexHandler(request: Request) =
  {.gcsafe.}:
    let db = open("examples/microblog.db", "", "", "")
    let x = render:
      html:
        head:
          title:
            say "Micro Blog"
          styleSheet:
            css "body":
              backgroundColor "black"
              color "white"
            css "a":
              color "white"
        body:
          h1:
            say "Micro Blog"
          ul:
            for blog in db.select(Blog):
              li:
                a:
                  href "/posts/" & $blog.id
                  say blog.title

    db.close()

  var headers: HttpHeaders
  headers["Content-Type"] = "text/html"
  request.respond(200, headers, x)

proc blogHandler(request: Request) =
  {.gcsafe.}:
    let db = open("examples/microblog.db", "", "", "")
    let id = request.uri.rsplit("/", maxSplit = 1)[^1].parseInt()
    let blog = db.filter(Blog, it.id == id)[0]
    #let blog = db.get(Blog, id)

    let x = render:
      html:
        head:
          title:
            say "Micro Blog - " & blog.title
          styleSheet:
            css "body":
              backgroundColor "black"
              color "white"
            css "a":
              color "white"
        body:
          h1:
            say blog.title
          h2:
            say "by " & blog.author
          say blog.body

    db.close()

  var headers: HttpHeaders
  headers["Content-Type"] = "text/html"
  request.respond(200, headers, x)

var router: Router
router.get("/", indexHandler)
router.get("/posts/*", blogHandler)

#router.get("/admin/*", admin([Post,])....)

let server = newServer(router)
echo "Serving on http://localhost:8080"
server.serve(Port(8080))
